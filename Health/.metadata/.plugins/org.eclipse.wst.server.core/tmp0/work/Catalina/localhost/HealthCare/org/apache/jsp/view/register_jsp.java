/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.0-M22
 * Generated at: 2025-04-20 15:21:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" \n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Patient Registration</title>\n");
      out.write("<style>\n");
      out.write(":root {\n");
      out.write("    --primary: #6c5ce7;\n");
      out.write("    --primary-dark: #5649c0;\n");
      out.write("    --secondary: #00cec9;\n");
      out.write("    --dark: #1e272e;\n");
      out.write("    --darker: #161d22;\n");
      out.write("    --light: #f5f6fa;\n");
      out.write("    --danger: #ff7675;\n");
      out.write("    --success: #55efc4;\n");
      out.write("}\n");
      out.write("\n");
      out.write("body {\n");
      out.write("    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n");
      out.write("    background-color: var(--dark);\n");
      out.write("    margin: 0;\n");
      out.write("    padding: 0;\n");
      out.write("    display: flex;\n");
      out.write("    justify-content: center;\n");
      out.write("    align-items: center;\n");
      out.write("    min-height: 100vh;\n");
      out.write("    background-image: radial-gradient(circle at 10% 20%, rgba(108, 92, 231, 0.1) 0%, transparent 20%),\n");
      out.write("        radial-gradient(circle at 90% 80%, rgba(0, 206, 201, 0.1) 0%, transparent 20%);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".register-container {\n");
      out.write("    background-color: var(--darker);\n");
      out.write("    padding: 2.5rem;\n");
      out.write("    border-radius: 12px;\n");
      out.write("    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);\n");
      out.write("    width: 420px;\n");
      out.write("    border: 1px solid rgba(255, 255, 255, 0.05);\n");
      out.write("    position: relative;\n");
      out.write("    overflow: hidden;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".register-container::before {\n");
      out.write("    content: '';\n");
      out.write("    position: absolute;\n");
      out.write("    top: 0;\n");
      out.write("    left: 0;\n");
      out.write("    width: 100%;\n");
      out.write("    height: 4px;\n");
      out.write("    background: linear-gradient(90deg, var(--primary), var(--secondary));\n");
      out.write("}\n");
      out.write("\n");
      out.write(".register-header {\n");
      out.write("    text-align: center;\n");
      out.write("    margin-bottom: 2rem;\n");
      out.write("    color: var(--light);\n");
      out.write("    position: relative;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".register-header h2 {\n");
      out.write("    margin: 0;\n");
      out.write("    font-size: 1.8rem;\n");
      out.write("    font-weight: 600;\n");
      out.write("    letter-spacing: 0.5px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".register-header p {\n");
      out.write("    margin-top: 0.8rem;\n");
      out.write("    font-size: 0.9rem;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".register-header a {\n");
      out.write("    color: var(--secondary);\n");
      out.write("    text-decoration: none;\n");
      out.write("    transition: color 0.3s;\n");
      out.write("    display: inline-flex;\n");
      out.write("    align-items: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".error-message {\n");
      out.write("    color: var(--danger);\n");
      out.write("    text-align: center;\n");
      out.write("    margin-bottom: 1.5rem;\n");
      out.write("    padding: 0.8rem;\n");
      out.write("    background-color: rgba(255, 118, 117, 0.1);\n");
      out.write("    border-radius: 6px;\n");
      out.write("    border-left: 3px solid var(--danger);\n");
      out.write("    font-size: 0.9rem;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".success-message {\n");
      out.write("    color: var(--success);\n");
      out.write("    text-align: center;\n");
      out.write("    margin-bottom: 1.5rem;\n");
      out.write("    padding: 0.8rem;\n");
      out.write("    background-color: rgba(85, 239, 196, 0.1);\n");
      out.write("    border-radius: 6px;\n");
      out.write("    border-left: 3px solid var(--success);\n");
      out.write("    font-size: 0.9rem;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".form-group {\n");
      out.write("    margin-bottom: 1.2rem;\n");
      out.write("    position: relative;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".form-group label {\n");
      out.write("    display: block;\n");
      out.write("    margin-bottom: 0.5rem;\n");
      out.write("    font-weight: 500;\n");
      out.write("    color: var(--light);\n");
      out.write("    font-size: 0.9rem;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".form-group input {\n");
      out.write("    width: 100%;\n");
      out.write("    padding: 0.8rem 1rem;\n");
      out.write("    background-color: rgba(255, 255, 255, 0.05);\n");
      out.write("    border: 1px solid rgba(255, 255, 255, 0.1);\n");
      out.write("    border-radius: 6px;\n");
      out.write("    box-sizing: border-box;\n");
      out.write("    color: var(--light);\n");
      out.write("    font-size: 0.95rem;\n");
      out.write("    transition: all 0.3s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".form-group input:focus {\n");
      out.write("    outline: none;\n");
      out.write("    border-color: var(--primary);\n");
      out.write("    box-shadow: 0 0 0 2px rgba(108, 92, 231, 0.2);\n");
      out.write("    background-color: rgba(108, 92, 231, 0.05);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".btn-register {\n");
      out.write("    width: 100%;\n");
      out.write("    padding: 0.9rem;\n");
      out.write("    background: linear-gradient(135deg, var(--primary), var(--primary-dark));\n");
      out.write("    color: white;\n");
      out.write("    border: none;\n");
      out.write("    border-radius: 6px;\n");
      out.write("    cursor: pointer;\n");
      out.write("    font-size: 1rem;\n");
      out.write("    font-weight: 500;\n");
      out.write("    letter-spacing: 0.5px;\n");
      out.write("    margin-top: 0.5rem;\n");
      out.write("    transition: all 0.3s;\n");
      out.write("    text-transform: uppercase;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".btn-register:hover {\n");
      out.write("    background: linear-gradient(135deg, var(--primary-dark), var(--primary));\n");
      out.write("    box-shadow: 0 4px 12px rgba(108, 92, 231, 0.3);\n");
      out.write("    transform: translateY(-1px);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".login-link {\n");
      out.write("    text-align: center;\n");
      out.write("    margin-top: 1.5rem;\n");
      out.write("    font-size: 0.9rem;\n");
      out.write("    color: var(--light);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".login-link a {\n");
      out.write("    color: var(--secondary);\n");
      out.write("    text-decoration: none;\n");
      out.write("    font-weight: 500;\n");
      out.write("    transition: color 0.3s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".login-link a:hover {\n");
      out.write("    color: var(--primary);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".password-requirements {\n");
      out.write("    margin-top: 0.5rem;\n");
      out.write("    font-size: 0.8rem;\n");
      out.write("    color: rgba(255, 255, 255, 0.6);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".password-requirements ul {\n");
      out.write("    padding-left: 1.2rem;\n");
      out.write("    margin: 0.3rem 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".password-requirements li {\n");
      out.write("    margin-bottom: 0.2rem;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Phone number validation styling */\n");
      out.write(".phone-validation {\n");
      out.write("    display: none;\n");
      out.write("    font-size: 0.8rem;\n");
      out.write("    margin-top: 0.3rem;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".phone-validation.valid {\n");
      out.write("    color: var(--success);\n");
      out.write("    display: block;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".phone-validation.invalid {\n");
      out.write("    color: var(--danger);\n");
      out.write("    display: block;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"register-container\">\n");
      out.write("        <div class=\"register-header\">\n");
      out.write("            <h2>Patient Registration</h2>\n");
      out.write("            <p>Create your account to access healthcare services</p>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        ");
 if (request.getAttribute("errorMessage") != null) { 
      out.write("\n");
      out.write("            <div class=\"error-message\">\n");
      out.write("                ");
      out.print( request.getAttribute("errorMessage") );
      out.write("\n");
      out.write("            </div>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("        \n");
      out.write("        ");
 if (request.getAttribute("successMessage") != null) { 
      out.write("\n");
      out.write("            <div class=\"success-message\">\n");
      out.write("                ");
      out.print( request.getAttribute("successMessage") );
      out.write("\n");
      out.write("            </div>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("        <form id=\"registrationForm\" action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/RegisterPatientServlet\" method=\"post\">\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("                <label for=\"name\">Full Name</label>\n");
      out.write("                <input type=\"text\" id=\"name\" name=\"name\" required placeholder=\"Enter your full name\">\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("                <label for=\"phone\">Phone Number</label>\n");
      out.write("                <input type=\"tel\" id=\"phone\" name=\"phone\" required placeholder=\"Enter your phone number\">\n");
      out.write("                <div id=\"phoneValidation\" class=\"phone-validation\"></div>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("                <label for=\"password\">Password</label>\n");
      out.write("                <input type=\"password\" id=\"password\" name=\"password\" required placeholder=\"Create a password\">\n");
      out.write("                <div class=\"password-requirements\">\n");
      out.write("                    <p>Password must contain:</p>\n");
      out.write("                    <ul>\n");
      out.write("                        <li>At least 8 characters</li>\n");
      out.write("                        <li>At least one uppercase letter</li>\n");
      out.write("                        <li>At least one number</li>\n");
      out.write("                    </ul>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("                <label for=\"confirmPassword\">Confirm Password</label>\n");
      out.write("                <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required placeholder=\"Confirm your password\">\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <button type=\"submit\" class=\"btn-register\">Register</button>\n");
      out.write("\n");
      out.write("            <div class=\"login-link\">\n");
      out.write("                Already have an account? <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/view/login.jsp\">Login here</a>\n");
      out.write("            </div>\n");
      out.write("        </form>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        // Phone number validation\n");
      out.write("        const phoneInput = document.getElementById('phone');\n");
      out.write("        const phoneValidation = document.getElementById('phoneValidation');\n");
      out.write("        \n");
      out.write("        phoneInput.addEventListener('input', function() {\n");
      out.write("            const phoneRegex = /^[0-9]{10,15}$/;\n");
      out.write("            if (phoneRegex.test(this.value)) {\n");
      out.write("                phoneValidation.textContent = 'Valid phone number';\n");
      out.write("                phoneValidation.className = 'phone-validation valid';\n");
      out.write("            } else {\n");
      out.write("                phoneValidation.textContent = 'Please enter a valid phone number (10-15 digits)';\n");
      out.write("                phoneValidation.className = 'phone-validation invalid';\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Password validation\n");
      out.write("        const form = document.getElementById('registrationForm');\n");
      out.write("        const passwordInput = document.getElementById('password');\n");
      out.write("        const confirmPasswordInput = document.getElementById('confirmPassword');\n");
      out.write("        \n");
      out.write("        form.addEventListener('submit', function(event) {\n");
      out.write("            // Check password requirements\n");
      out.write("            const password = passwordInput.value;\n");
      out.write("            const passwordRegex = /^(?=.*[A-Z])(?=.*\\d).{8,}$/;\n");
      out.write("            \n");
      out.write("            if (!passwordRegex.test(password)) {\n");
      out.write("                event.preventDefault();\n");
      out.write("                alert('Password must be at least 8 characters long and contain at least one uppercase letter and one number');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            // Check password match\n");
      out.write("            if (password !== confirmPasswordInput.value) {\n");
      out.write("                event.preventDefault();\n");
      out.write("                alert('Passwords do not match');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            // Check phone number validation\n");
      out.write("            if (phoneValidation.className.includes('invalid')) {\n");
      out.write("                event.preventDefault();\n");
      out.write("                alert('Please enter a valid phone number');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
