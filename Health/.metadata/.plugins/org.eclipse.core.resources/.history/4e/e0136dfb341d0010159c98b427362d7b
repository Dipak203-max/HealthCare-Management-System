package filter;

import java.io.IOException;
import jakarta.servlet.*;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.*;
import model.User;

@WebFilter("/*")
public class AuthenticationFilter implements Filter {
    
    public void init(FilterConfig fConfig) throws ServletException {}
    
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) 
            throws IOException, ServletException {
        
        HttpServletRequest req = (HttpServletRequest) request;
        HttpServletResponse res = (HttpServletResponse) response;
        String uri = req.getRequestURI();
        String contextPath = req.getContextPath();
        
        HttpSession session = req.getSession(false);
        
        // Public resources that don't require authentication
        boolean loginRequest = uri.endsWith("login.jsp") || uri.endsWith("LoginServlet");
        boolean resourceRequest = uri.contains("/css/") || uri.contains("/js/") || 
                                uri.contains("/images/") || uri.contains("/assets/");
        
        if (loginRequest || resourceRequest) {
            chain.doFilter(request, response);
            return;
        }
        
        // Check if user is logged in
        if (session == null || session.getAttribute("user") == null) {
            res.sendRedirect(contextPath + "/LoginServlet");
            return;
        }
        
        // Get user role for authorization check
        User user = (User) session.getAttribute("user");
        String role = user.getRole();
        
        // Role-based access control
        if (isAccessDenied(uri, role)) {
            res.sendError(HttpServletResponse.SC_FORBIDDEN, "You don't have permission to access this page");
            return;
        }
        
        // Proceed with the request
        chain.doFilter(request, response);
    }
    
    private boolean isAccessDenied(String uri, String role) {
        // Admin has full access to all management pages
        if ("admin".equals(role)) {
            return false;
        }
        
        // Doctor-specific restrictions
        if ("doctor".equals(role)) {
            // Doctors shouldn't access admin pages
            if (uri.contains("/admin/") || uri.contains("Admin")) {
                return true;
            }
            // Allow access to doctor pages
            return false;
        }
        
        // Patient-specific restrictions
        if ("patient".equals(role)) {
            // Patients should only access patient pages
            return !uri.contains("/patient/") && !uri.contains("Patient");
        }
        
        // Default deny for unknown roles
        return true;
    }
    
    public void destroy() {}
}