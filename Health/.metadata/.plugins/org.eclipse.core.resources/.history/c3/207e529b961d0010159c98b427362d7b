package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import model.Patient;
import util.DBUtil;

public class PatientDao {
	public List<Patient> getAllPatients() {
	    List<Patient> patients = new ArrayList<>();
	    
	    // Start with simple query - remove JOIN temporarily
	    String sql = "SELECT patient_id, id, name, phone FROM patients";
	    
	    System.out.println("DEBUG: Executing patient query: " + sql);
	    
	    try (Connection connection = DBUtil.getConnection();
	         PreparedStatement statement = connection.prepareStatement(sql);
	         ResultSet resultSet = statement.executeQuery()) {
	        
	        System.out.println("DEBUG: Query executed, checking results...");
	        
	        while (resultSet.next()) {
	            Patient patient = new Patient();
	            patient.setPatientId(resultSet.getInt("patient_id"));
	            patient.setUserId(resultSet.getInt("id"));
	            patient.setName(resultSet.getString("name"));
	            patient.setPhone(resultSet.getString("phone"));
	            
	            System.out.println("DEBUG: Found patient - ID: " + patient.getPatientId() 
	                + ", Name: " + patient.getName());
	            
	            patients.add(patient);
	        }
	        
	        System.out.println("DEBUG: Total patients found: " + patients.size());
	        
	    } catch (SQLException e) {
	        System.err.println("ERROR in getAllPatients: " + e.getMessage());
	        e.printStackTrace();
	    }
	    return patients;
	}
	

	
	
	public boolean addPatient(Patient patient, String password) throws SQLException {
        Connection connection = null;
        try {
            connection = DBUtil.getConnection();
            connection.setAutoCommit(false); // Start transaction
            
            // 1. First create the user
            String userSql = "INSERT INTO users (username, password, role) VALUES (?, ?, 'patient')";
            try (PreparedStatement userStmt = connection.prepareStatement(userSql, Statement.RETURN_GENERATED_KEYS)) {
                // Create username by converting name to lowercase and removing spaces
                String username = patient.getName().toLowerCase().replace(" ", "");
                userStmt.setString(1, username);
                userStmt.setString(2, password);
                userStmt.executeUpdate();
                
                // Get the generated user ID
                try (ResultSet rs = userStmt.getGeneratedKeys()) {
                    if (rs.next()) {
                        int userId = rs.getInt(1);
                        
                        // 2. Now create the patient with this user ID
                        String patientSql = "INSERT INTO patients (id, name, phone) VALUES (?, ?, ?)";
                        try (PreparedStatement patientStmt = connection.prepareStatement(patientSql)) {
                            patientStmt.setInt(1, userId);
                            patientStmt.setString(2, patient.getName());
                            patientStmt.setString(3, patient.getPhone());
                            patientStmt.executeUpdate();
                        }
                    }
                }
            }
            connection.commit();
            return true;
        } catch (SQLException e) {
            if (connection != null) connection.rollback();
            throw e;
        } finally {
            if (connection != null) connection.close();
        }
    }
	
	public boolean updatePatient(Patient patient) throws SQLException {
        String sql = "UPDATE patients SET name = ?, phone = ? WHERE patient_id = ?";
        
        try (Connection connection = DBUtil.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {
            
            statement.setString(1, patient.getName());
            statement.setString(2, patient.getPhone());
            statement.setInt(3, patient.getPatientId());
            
            return statement.executeUpdate() > 0;
        }
    }
    
   
	public boolean deletePatient(int patientId) throws SQLException {
	    Connection connection = null;
	    try {
	        connection = DBUtil.getConnection();
	        connection.setAutoCommit(false);
	        
	        // 1. First get the user ID to delete from users table
	        String getUserIdSql = "SELECT id FROM patients WHERE patient_id = ?";
	        int userId = 0;
	        
	        try (PreparedStatement getStmt = connection.prepareStatement(getUserIdSql)) {
	            getStmt.setInt(1, patientId);
	            try (ResultSet rs = getStmt.executeQuery()) {
	                if (rs.next()) {
	                    userId = rs.getInt("id");
	                }
	            }
	        }
	        
	        // 2. Delete all appointments for this patient first
	        String deleteAppointmentsSql = "DELETE FROM appointments WHERE patient_id = ?";
	        try (PreparedStatement appointmentsStmt = connection.prepareStatement(deleteAppointmentsSql)) {
	            appointmentsStmt.setInt(1, patientId);
	            appointmentsStmt.executeUpdate();
	        }
	        
	        // 3. Delete from patients table
	        String deletePatientSql = "DELETE FROM patients WHERE patient_id = ?";
	        try (PreparedStatement patientStmt = connection.prepareStatement(deletePatientSql)) {
	            patientStmt.setInt(1, patientId);
	            patientStmt.executeUpdate();
	        }
	        
	        // 4. Delete from users table
	        if (userId > 0) {
	            String deleteUserSql = "DELETE FROM users WHERE id = ?";
	            try (PreparedStatement userStmt = connection.prepareStatement(deleteUserSql)) {
	                userStmt.setInt(1, userId);
	                userStmt.executeUpdate();
	            }
	        }
	        
	        connection.commit();
	        return true;
	    } catch (SQLException e) {
	        if (connection != null) connection.rollback();
	        throw e;
	    } finally {
	        if (connection != null) connection.close();
	    }
	}
	
	
    
    public Patient getPatientById(int patientId) throws SQLException {
        String sql = "SELECT * FROM patients WHERE patient_id = ?";
        
        try (Connection connection = DBUtil.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {
            
            statement.setInt(1, patientId);
            
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    Patient patient = new Patient();
                    patient.setPatientId(resultSet.getInt("patient_id"));
                    patient.setUserId(resultSet.getInt("id"));
                    patient.setName(resultSet.getString("name"));
                    patient.setPhone(resultSet.getString("phone"));
                    return patient;
                }
            }
        }
        return null;
    }
    
    public Patient getPatientByUserId(int userId) throws SQLException {
        String sql = "SELECT * FROM patients WHERE id = ?";
        
        try (Connection connection = DBUtil.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {
            
            statement.setInt(1, userId);
            
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    Patient patient = new Patient();
                    patient.setPatientId(resultSet.getInt("patient_id"));
                    patient.setUserId(resultSet.getInt("id"));
                    patient.setName(resultSet.getString("name"));
                    patient.setPhone(resultSet.getString("phone"));
                    return patient;
                }
            }
        }
        throw new SQLException("Patient not found for user ID: " + userId);
    }
}

